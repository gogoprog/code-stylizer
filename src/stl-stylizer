#!/usr/bin/env python2

import argparse
import os
import json
import sys
import time
import traceback
import collections

from contextlib import contextmanager
from os.path import basename, dirname, isabs, isdir, join, realpath, relpath
from textwrap import dedent

import subprocess
import re

import clang.cindex
from clang.cindex import CompilationDatabase, CursorKind, Diagnostic, TranslationUnit

def main(argv):
    global args
    global initialCwd

    args = parse_args(argv)
    initialCwd = os.getcwd()
    process_header("vector")
    process_header("iostream")

def process_header(name):
    debug("  processing <" + name + "> header")
    tagger = Tagger()
    symbols = {}
    file_name = "/tmp/stl-stylizer." + name + ".cpp"

    os.chdir(initialCwd)
    out = open(file_name, "wb")
    out.write("#include <" + name + ">\nint main(int argc, char *argv[]) { return EXIT_SUCCESS; }")
    out.close()

    do_tags([file_name], tagger, symbols)

    os.chdir("..")
    if not os.path.exists("out"):
        os.makedirs("out")

    out = open("out/" + name + ".h", "wb")
    process_symbols(out, symbols)
    out.close()

    print("  generated out/" + name + ".h")

    os.chdir(initialCwd)
    json_output = json.dumps(symbols, sort_keys=True, indent=4, separators=(',', ': '))
    out = open("/tmp/stl-stylizer." + name + ".json", "wb")
    out.write(json_output)
    out.close()

def write_namespace(out, symbol, name):
    out.write("namespace " + name + " {\n")
    process_symbols(out, symbol)
    out.write("}\n")

def write_class(out, symbol, name):
    out.write("class " + name + " {\n")
    process_symbols(out, symbol)
    out.write("}\n")

writers = {
    CursorKind.NAMESPACE.value: write_namespace,
    CursorKind.CLASS_DECL.value: write_class
}

def process_symbols(out, symbols):
    for s in symbols:
        if s != "$type":
            if symbols[s]['$type'] in writers:
                writer = writers[symbols[s]['$type']]
                writer(out, symbols[s], s)

def clang_default_include():
    sub = subprocess.Popen(['clang', '-v', '-x', 'c++', '-'],
                           stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    _, out = sub.communicate('')
    reg = re.compile('lib/clang.*/include$')
    return next(line.strip() for line in out.split('\n') if reg.search(line))


def do_tags(compiler_command_line, tagger, symbols):
    index = clang.cindex.Index.create()

    compiler_command_line = ['-I', clang_default_include()] + compiler_command_line

    try:
        start = time.time()
        tu = index.parse(None, compiler_command_line,
                         options=TranslationUnit.PARSE_SKIP_FUNCTION_BODIES)
        debug("  clang parse took %.2fs" % (time.time() - start))
    except Exception:
        debug(traceback.format_exc())
        error("Clang failed to parse '%s'" % " ".join(compiler_command_line))

    errors = [d for d in tu.diagnostics
              if d.severity in (Diagnostic.Error, Diagnostic.Fatal)]
    if len(errors) > 0:
        debug("\n".join([d.spelling for d in errors]))
        error("File '%s' failed clang's parsing and type-checking" %
              tu.spelling)

    start = time.time()
    for c in tu.cursor.get_children():
        do_cursor(c, tagger, symbols)
    debug("  tag generation took %.2fs" % (time.time() - start))

def do_cursor(cursor, tagger, symbols):

    if is_definition(cursor):
        parents = semantic_parents(cursor)
        directParent = symbols

        for p in parents:
            pname = p['name']
            if not pname in directParent:
                directParent[pname] = {'$type':p['kind']}
            directParent = directParent[pname]

        name = cursor.displayname

        if not name in directParent:
            directParent[name] = {'$type':cursor.kind.value}
        else:
            directParent[name]['$type'] = cursor.kind.value

        tagger.tag(cursor, name)

    if should_tag_children(cursor):
        for c in cursor.get_children():
            do_cursor(c, tagger, symbols)

def is_definition(cursor):
    return (
        (cursor.is_definition() and not cursor.kind in [
            CursorKind.CXX_ACCESS_SPEC_DECL,
            CursorKind.TEMPLATE_TYPE_PARAMETER,
            CursorKind.UNEXPOSED_DECL,
            ]) or
        # work around bug (?) whereby using PARSE_SKIP_FUNCTION_BODIES earlier
        # causes libclang to report cursor.is_definition() as false for
        # function definitions.
        cursor.kind in [
            CursorKind.FUNCTION_DECL,
            CursorKind.CXX_METHOD,
            CursorKind.FUNCTION_TEMPLATE,
            ])

def semantic_parents(cursor):
    p = collections.deque()
    c = cursor.semantic_parent
    while c and is_named_scope(c):
        p.appendleft({'name':c.displayname, 'kind':c.kind.value})
        c = c.semantic_parent
    return list(p)

def should_tag_children(cursor):
    return is_named_scope(cursor) or cursor.kind in [
        # 'extern "C" { ... }' should be LINKAGE_SPEC but is UNEXPOSED_DECL
        CursorKind.UNEXPOSED_DECL,
        ]

def is_named_scope(cursor):
    return cursor.kind in [
        CursorKind.NAMESPACE,
        CursorKind.STRUCT_DECL,
        CursorKind.UNION_DECL,
        CursorKind.ENUM_DECL,
        CursorKind.CLASS_DECL,
        CursorKind.CLASS_TEMPLATE,
        CursorKind.CLASS_TEMPLATE_PARTIAL_SPECIALIZATION,
        ]

class Tagger(object):
    def __init__(self):
        self.tags = {}
        self.current_file_name = None
        self.current_file_lines = None

    def tag(self, cursor, tagname):
        """The complete tags file entry for symbol 'tag'."""
        if self.current_file_name != realpath(cursor.location.file.name):
            self.current_file_name = realpath(cursor.location.file.name)
            debug("  opening " + self.current_file_name)
            with open(self.current_file_name) as f:
                self.current_file_lines = f.readlines()

        if self.current_file_name not in self.tags:
            self.tags[self.current_file_name] = set()

        return self.tags[self.current_file_name].add((
            self.current_file_lines[cursor.location.line - 1].rstrip(),
            tagname,
            cursor.location.line,
            cursor.location.offset))

def parse_args(argv):
    parser = argparse.ArgumentParser(
        description="Generate STL headers in different coding style.",
        usage="\nstl-stylizer [options] ")

    parser.add_argument("-v", "--verbose", action="store_true",
                        help="enable debugging output")
    parser.add_argument("--version", action="version",
                        version="stl-stylizer 0.1")

    a = parser.parse_args(argv[1:])

    return a

def debug(s):
    if args.verbose:
        sys.stderr.write(s + "\n")

def warn(s):
    sys.stderr.write("%s: Warning: %s\n" % (basename(sys.argv[0]), s))

def error(s):
    sys.stderr.write("%s: Error: %s\n" % (basename(sys.argv[0]), s))
    sys.exit(1)

if __name__ == "__main__":
    sys.exit(main(sys.argv))
